From a3f6e96806c6f86ca00fcc1e00cd49af5d5debf9 Mon Sep 17 00:00:00 2001
From: Paolo Bonzini <pbonzini@redhat.com>
Date: Thu, 3 Feb 2011 15:31:22 -0200
Subject: [PATCH 1/3] USB HID does not support Set_Idle

RH-Author: Paolo Bonzini <pbonzini@redhat.com>
Message-id: <1296747083-366-2-git-send-email-pbonzini@redhat.com>
Patchwork-id: 17630
O-Subject: [RHEL6.1 KVM PATCH v3 1/2] USB HID does not support Set_Idle
Bugzilla: 665025
RH-Acked-by: Gerd Hoffmann <kraxel@redhat.com>
RH-Acked-by: Amit Shah <amit.shah@redhat.com>
RH-Acked-by: Alex Williamson <alex.williamson@redhat.com>
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>

Bugzilla: 665025

Upstream status: 68735b6c0cd2fe82ddd8fd3328a261017e67d1aa

Brew build: http://brewweb.devel.redhat.com/brew/taskinfo?taskID=3082386

QEMU HID support does not work properly with the Set_Idle command.  Once a
non-zero value is given to Set_Idle, then the keyboard reports an event
on every poll - not based on the time issued in the Set_Idle command.

Signed-off-by: Anthony Liguori <aliguori@us.ibm.com>
Signed-off-by: Paolo Bonzini <pbonzini@redhat.com>
From: Kevin O'Connor <kevin@koconnor.net>
---
 hw/usb-hid.c |   12 ++++++++++--
 1 files changed, 10 insertions(+), 2 deletions(-)

Signed-off-by: Luiz Capitulino <lcapitulino@redhat.com>
---
 hw/usb-hid.c |   12 ++++++++++--
 1 files changed, 10 insertions(+), 2 deletions(-)

diff --git a/hw/usb-hid.c b/hw/usb-hid.c
index 07ab0e4..e9db523 100644
--- a/hw/usb-hid.c
+++ b/hw/usb-hid.c
@@ -66,6 +66,7 @@ typedef struct USBHIDState {
     int kind;
     int protocol;
     uint8_t idle;
+    int64_t next_idle_clock;
     int changed;
     void *datain_opaque;
     void (*datain)(void *);
@@ -636,6 +637,11 @@ static void usb_keyboard_handle_reset(USBDevice *dev)
     s->protocol = 1;
 }
 
+static void usb_hid_set_next_idle(USBHIDState *s, int64_t curtime)
+{
+    s->next_idle_clock = curtime + (get_ticks_per_sec() * s->idle * 4) / 1000;
+}
+
 static int usb_hid_handle_control(USBDevice *dev, int request, int value,
                                   int index, int length, uint8_t *data)
 {
@@ -801,6 +807,7 @@ static int usb_hid_handle_control(USBDevice *dev, int request, int value,
         break;
     case SET_IDLE:
         s->idle = (uint8_t) (value >> 8);
+        usb_hid_set_next_idle(s, qemu_get_clock(vm_clock));
         ret = 0;
         break;
     default:
@@ -819,9 +826,10 @@ static int usb_hid_handle_data(USBDevice *dev, USBPacket *p)
     switch(p->pid) {
     case USB_TOKEN_IN:
         if (p->devep == 1) {
-            /* TODO: Implement finite idle delays.  */
-            if (!(s->changed || s->idle))
+            int64_t curtime = qemu_get_clock(vm_clock);
+            if (!s->changed && (!s->idle || s->next_idle_clock - curtime > 0))
                 return USB_RET_NAK;
+            usb_hid_set_next_idle(s, curtime);
             s->changed = 0;
             if (s->kind == USB_MOUSE)
                 ret = usb_mouse_poll(s, p->data, p->len);
-- 
1.7.4.rc1.16.gd2f15e

