From 75586368ef7756d673dc5e50b993681d679206a1 Mon Sep 17 00:00:00 2001
Message-Id: <75586368ef7756d673dc5e50b993681d679206a1.1335961279.git.minovotn@redhat.com>
From: Jeffrey Cody <jcody@redhat.com>
Date: Tue, 1 May 2012 19:18:49 +0200
Subject: [PATCH 1/2] block: change block-job-set-speed argument from 'value'
 to 'speed'

RH-Author: Jeffrey Cody <jcody@redhat.com>
Message-id: <92cffa8533d391c62f89586180a09c1fb2ee54dd.1335896521.git.jcody@redhat.com>
Patchwork-id: 39538
O-Subject: [RHEL6.3 qemu-kvm PATCH v2 1/2] block: change block-job-set-speed argument from 'value' to 'speed'
Bugzilla: 813953
RH-Acked-by: Eric Blake <eblake@redhat.com>
RH-Acked-by: Markus Armbruster <armbru@redhat.com>
RH-Acked-by: Laszlo Ersek <lersek@redhat.com>

From: Stefan Hajnoczi <stefanha@linux.vnet.ibm.com>

Signed-off-by: Stefan Hajnoczi <stefanha@linux.vnet.ibm.com>
Acked-by: Kevin Wolf <kwolf@redhat.com>
Signed-off-by: Luiz Capitulino <lcapitulino@redhat.com>
(cherry picked from commit 882ec7ce531091bc0f3ffc6ac71943cf383f86a6)

Conflicts:

	block.c
	block/stream.c
	block_int.h
	blockdev.c
	hmp-commands.hx
	qapi-schema.json
	qmp-commands.hx

Previous patches had propagated Error up through the function calls, and also
the commands used the QAPI upstream, while not in the downstream versions.
Since streaming commands downstream are implemented with QMP but not QAPI, I
did not take those changes from the upstream commit, and simply changed the
parameter / command values from 'value' to 'speed'.

Also, as expected, conflict differences with hmp-commands.hx and
qmp-commands.hx (changes added to qemu-monitor.hx)
Signed-off-by: Jeff Cody <jcody@redhat.com>
---
 block.c         |    6 +++---
 block/stream.c  |    6 +++---
 block_int.h     |    4 ++--
 blockdev.c      |    4 ++--
 qemu-monitor.hx |    4 ++--
 5 files changed, 12 insertions(+), 12 deletions(-)

Signed-off-by: Michal Novotny <minovotn@redhat.com>
---
 block.c         |    6 +++---
 block/stream.c  |    6 +++---
 block_int.h     |    4 ++--
 blockdev.c      |    4 ++--
 qemu-monitor.hx |    4 ++--
 5 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/block.c b/block.c
index d9008e2..3f9605d 100644
--- a/block.c
+++ b/block.c
@@ -3765,16 +3765,16 @@ void block_job_complete(BlockJob *job, int ret)
     bdrv_set_in_use(bs, 0);
 }
 
-int block_job_set_speed(BlockJob *job, int64_t value)
+int block_job_set_speed(BlockJob *job, int64_t speed)
 {
     int rc;
 
     if (!job->job_type->set_speed) {
         return -ENOTSUP;
     }
-    rc = job->job_type->set_speed(job, value);
+    rc = job->job_type->set_speed(job, speed);
     if (rc == 0) {
-        job->speed = value;
+        job->speed = speed;
     }
     return rc;
 }
diff --git a/block/stream.c b/block/stream.c
index a396be5..48523cf 100644
--- a/block/stream.c
+++ b/block/stream.c
@@ -261,14 +261,14 @@ wait:
     block_job_complete(&s->common, ret);
 }
 
-static int stream_set_speed(BlockJob *job, int64_t value)
+static int stream_set_speed(BlockJob *job, int64_t speed)
 {
     StreamBlockJob *s = container_of(job, StreamBlockJob, common);
 
-    if (value < 0) {
+    if (speed < 0) {
         return -EINVAL;
     }
-    ratelimit_set_speed(&s->limit, value / BDRV_SECTOR_SIZE);
+    ratelimit_set_speed(&s->limit, speed / BDRV_SECTOR_SIZE);
     return 0;
 }
 
diff --git a/block_int.h b/block_int.h
index 2313ce5..7dea4b3 100644
--- a/block_int.h
+++ b/block_int.h
@@ -60,7 +60,7 @@ typedef struct BlockJobType {
     const char *job_type;
 
     /** Optional callback for job types that support setting a speed limit */
-    int (*set_speed)(BlockJob *job, int64_t value);
+    int (*set_speed)(BlockJob *job, int64_t speed);
 } BlockJobType;
 
 /**
@@ -309,7 +309,7 @@ int is_windows_drive(const char *filename);
 void *block_job_create(const BlockJobType *job_type, BlockDriverState *bs,
                        BlockDriverCompletionFunc *cb, void *opaque);
 void block_job_complete(BlockJob *job, int ret);
-int block_job_set_speed(BlockJob *job, int64_t value);
+int block_job_set_speed(BlockJob *job, int64_t speed);
 void block_job_cancel(BlockJob *job);
 bool block_job_is_cancelled(BlockJob *job);
 int block_job_cancel_sync(BlockJob *job);
diff --git a/blockdev.c b/blockdev.c
index aea72e4..157d971 100644
--- a/blockdev.c
+++ b/blockdev.c
@@ -1334,7 +1334,7 @@ int do_block_job_set_speed(Monitor *mon, const QDict *params,
                            QObject **ret_data)
 {
     const char *device = qdict_get_str(params, "device");
-    int64_t value = qdict_get_int(params, "value");
+    int64_t speed = qdict_get_int(params, "speed");
     BlockJob *job = find_block_job(device);
 
     if (!job) {
@@ -1342,7 +1342,7 @@ int do_block_job_set_speed(Monitor *mon, const QDict *params,
         return -1;
     }
 
-    if (block_job_set_speed(job, value) < 0) {
+    if (block_job_set_speed(job, speed) < 0) {
         qerror_report(QERR_NOT_SUPPORTED);
         return -1;
     }
diff --git a/qemu-monitor.hx b/qemu-monitor.hx
index 4326879..0330943 100644
--- a/qemu-monitor.hx
+++ b/qemu-monitor.hx
@@ -2200,8 +2200,8 @@ EQMP
 
     {
         .name       = "block-job-set-speed",
-        .args_type  = "device:B,value:o",
-        .params     = "device value",
+        .args_type  = "device:B,speed:o",
+        .params     = "device speed",
         .help       = "set maximum speed for a background block operation",
         .user_print = monitor_user_noop,
         .mhandler.cmd_new = do_block_job_set_speed,
-- 
1.7.7.6

