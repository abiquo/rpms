From a06b237546c54bca12e01cb0a824c8b3e4707d04 Mon Sep 17 00:00:00 2001
Message-Id: <a06b237546c54bca12e01cb0a824c8b3e4707d04.1349175436.git.minovotn@redhat.com>
In-Reply-To: <94968b7fa9b14e71f004474d7ce77e189e6a2bf3.1349175436.git.minovotn@redhat.com>
References: <94968b7fa9b14e71f004474d7ce77e189e6a2bf3.1349175436.git.minovotn@redhat.com>
From: Amos Kong <akong@redhat.com>
Date: Mon, 1 Oct 2012 14:12:39 +0200
Subject: [PATCH 26/34] use inet_listen()/inet_connect() to support ipv6
 migration

RH-Author: Amos Kong <akong@redhat.com>
Message-id: <1349100767-9066-7-git-send-email-akong@redhat.com>
Patchwork-id: 42565
O-Subject: [RHEL-6.4 qemu-kvm PATCH v7 06/14] use inet_listen()/inet_connect() to support ipv6 migration
Bugzilla: 680356
RH-Acked-by: Paolo Bonzini <pbonzini@redhat.com>
RH-Acked-by: Markus Armbruster <armbru@redhat.com>
RH-Acked-by: Orit Wasserman <owasserm@redhat.com>

Use help functions in qemu-socket.c for tcp migration,
which already support ipv6 addresses.

Currently errp will be set to UNDEFINED_ERROR when migration fails,
qemu would output "migration failed: ...", and current user can
see a message("An undefined error has occurred") in monitor.

This patch changed tcp_start_outgoing_migration()/inet_connect()
/inet_connect_opts(), socket error would be passed back,
then current user can see a meaningful err message in monitor.

Qemu will exit if listening fails, so output socket error
to qemu stderr.

For IPv6 brackets must be mandatory if you require a port.
Referencing to RFC5952, the recommended format is:
  [2312::8274]:5200

test status: Successed
listen side: qemu-kvm .... -incoming tcp:[2312::8274]:5200
client side: qemu-kvm ...
             (qemu) migrate -d tcp:[2312::8274]:5200

(Cherry-picked from commit d5c5dacc7027af2acfa87f860f11d7791776301f)

Conflicts:
    migration-tcp.c
    migration.c
    migration.h
    vl.c

Internal migrate command wasn't converted to QAPI, this caused some
conflicts. This patch just replaced socket creation/connection code
with new functions in qemu-sockets.c, which support ipv6.

Signed-off-by: Amos Kong <akong@redhat.com>
Reviewed-by: Orit Wasserman <owasserm@redhat.com>
Reviewed-by: Michael Roth <mdroth@linux.vnet.ibm.com>
Signed-off-by: Anthony Liguori <aliguori@us.ibm.com>
---
 migration-tcp.c |   79 +++++++++++++++++++-----------------------------------
 migration.c     |   13 +++++++--
 migration.h     |    8 +++--
 vl.c            |    7 ++++-
 4 files changed, 49 insertions(+), 58 deletions(-)

Signed-off-by: Michal Novotny <minovotn@redhat.com>
---
 migration-tcp.c | 79 ++++++++++++++++++++-------------------------------------
 migration.c     | 13 +++++++---
 migration.h     |  8 +++---
 vl.c            |  7 ++++-
 4 files changed, 49 insertions(+), 58 deletions(-)

diff --git a/migration-tcp.c b/migration-tcp.c
index 20f2e37..3be5c53 100644
--- a/migration-tcp.c
+++ b/migration-tcp.c
@@ -80,15 +80,11 @@ MigrationState *tcp_start_outgoing_migration(Monitor *mon,
                                              const char *host_port,
                                              int64_t bandwidth_limit,
                                              int detach,
-					     int blk,
-					     int inc)
+                                             int blk,
+                                             int inc,
+                                             Error **errp)
 {
-    struct sockaddr_in addr;
     FdMigrationState *s;
-    int ret;
-
-    if (parse_host_port(&addr, host_port) < 0)
-        return NULL;
 
     s = qemu_mallocz(sizeof(*s));
 
@@ -105,36 +101,35 @@ MigrationState *tcp_start_outgoing_migration(Monitor *mon,
     s->state = MIG_STATE_ACTIVE;
     s->mon = NULL;
     s->bandwidth_limit = bandwidth_limit;
-    s->fd = qemu_socket(PF_INET, SOCK_STREAM, 0);
-    if (s->fd == -1) {
-        qemu_free(s);
-        return NULL;
-    }
-
-    socket_set_nonblock(s->fd);
 
     if (!detach) {
         migrate_fd_monitor_suspend(s, mon);
     }
 
-    do {
-        ret = connect(s->fd, (struct sockaddr *)&addr, sizeof(addr));
-        if (ret == -1)
-            ret = -(s->get_error(s));
-
-        if (ret == -EINPROGRESS || ret == -EWOULDBLOCK)
-            qemu_set_fd_handler2(s->fd, NULL, NULL, tcp_wait_for_connect, s);
-    } while (ret == -EINTR);
+    s->fd = inet_connect(host_port, false, errp);
 
-    if (ret < 0 && ret != -EINPROGRESS && ret != -EWOULDBLOCK) {
-        DPRINTF("connect failed\n");
-        close(s->fd);
-        qemu_free(s);
-        return NULL;
-    } else if (ret >= 0)
+    if (!error_is_set(errp)) {
         migrate_fd_connect(s);
+    } else if (error_is_type(*errp, QERR_SOCKET_CONNECT_IN_PROGRESS)) {
+        DPRINTF("connect in progress\n");
+        qemu_set_fd_handler2(s->fd, NULL, NULL, tcp_wait_for_connect, s);
+    } else if (error_is_type(*errp, QERR_SOCKET_CREATE_FAILED)) {
+        DPRINTF("connect failed\n");
+        goto err;
+    } else if (error_is_type(*errp, QERR_SOCKET_CONNECT_FAILED)) {
+        DPRINTF("connect failed\n");
+        migrate_fd_error(s);
+        goto err;
+    } else {
+        DPRINTF("unknown error\n");
+        goto err;
+    }
 
     return &s->mig_state;
+
+err:
+    qemu_free(s);
+    return NULL;
 }
 
 static void tcp_accept_incoming_migration(void *opaque)
@@ -170,36 +165,18 @@ out:
     close(c);
 }
 
-int tcp_start_incoming_migration(const char *host_port)
+int tcp_start_incoming_migration(const char *host_port, Error **errp)
 {
-    struct sockaddr_in addr;
-    int val;
     int s;
 
-    if (parse_host_port(&addr, host_port) < 0) {
-        fprintf(stderr, "invalid host/port combination: %s\n", host_port);
-        return -EINVAL;
-    }
-
-    s = qemu_socket(PF_INET, SOCK_STREAM, 0);
-    if (s == -1)
-        return -socket_error();
-
-    val = 1;
-    setsockopt(s, SOL_SOCKET, SO_REUSEADDR, (const char *)&val, sizeof(val));
+    s = inet_listen(host_port, NULL, 256, SOCK_STREAM, 0, errp);
 
-    if (bind(s, (struct sockaddr *)&addr, sizeof(addr)) == -1)
-        goto err;
-
-    if (listen(s, 1) == -1)
-        goto err;
+    if (s < 0) {
+        return -1;
+    }
 
     qemu_set_fd_handler2(s, NULL, tcp_accept_incoming_migration, NULL,
                          (void *)(unsigned long)s);
 
     return 0;
-
-err:
-    close(s);
-    return -socket_error();
 }
diff --git a/migration.c b/migration.c
index 2b99252..d09ad71 100644
--- a/migration.c
+++ b/migration.c
@@ -46,13 +46,13 @@ static MigrationState *current_migration;
 static NotifierList migration_state_notifiers =
     NOTIFIER_LIST_INITIALIZER(migration_state_notifiers);
 
-int qemu_start_incoming_migration(const char *uri)
+int qemu_start_incoming_migration(const char *uri, Error **errp)
 {
     const char *p;
     int ret;
 
     if (strstart(uri, "tcp:", &p))
-        ret = tcp_start_incoming_migration(p);
+        ret = tcp_start_incoming_migration(p, errp);
 #if !defined(WIN32)
     else if (strstart(uri, "exec:", &p))
         ret =  exec_start_incoming_migration(p);
@@ -93,6 +93,7 @@ int do_migrate(Monitor *mon, const QDict *qdict, QObject **ret_data)
 {
     MigrationState *s = NULL;
     const char *p;
+    Error *errp = NULL;
     int detach = qdict_get_try_bool_or_int(qdict, "detach", 0);
     int blk = qdict_get_try_bool_or_int(qdict, "blk", 0);
     int inc = qdict_get_try_bool_or_int(qdict, "inc", 0);
@@ -111,7 +112,7 @@ int do_migrate(Monitor *mon, const QDict *qdict, QObject **ret_data)
     START_MIGRATION_CLOCK();
     if (strstart(uri, "tcp:", &p)) {
         s = tcp_start_outgoing_migration(mon, p, max_throttle, detach,
-                                         blk, inc);
+                                         blk, inc, &errp);
 #if !defined(WIN32)
     } else if (strstart(uri, "exec:", &p)) {
         s = exec_start_outgoing_migration(mon, p, max_throttle, detach,
@@ -128,6 +129,12 @@ int do_migrate(Monitor *mon, const QDict *qdict, QObject **ret_data)
         return -1;
     }
 
+    if (error_is_set(&errp)) {
+        qerror_report_err(errp);
+        error_free(errp);
+        return -1;
+    }
+
     if (s == NULL) {
         monitor_printf(mon, "migration failed\n");
         return -1;
diff --git a/migration.h b/migration.h
index 2170792..bf94924 100644
--- a/migration.h
+++ b/migration.h
@@ -17,6 +17,7 @@
 #include "qdict.h"
 #include "qemu-common.h"
 #include "notify.h"
+#include "qerror.h"
 
 #define MIG_STATE_ERROR		-1
 #define MIG_STATE_COMPLETED	0
@@ -53,7 +54,7 @@ struct FdMigrationState
 
 void process_incoming_migration(QEMUFile *f);
 
-int qemu_start_incoming_migration(const char *uri);
+int qemu_start_incoming_migration(const char *uri, Error **errp);
 
 int do_migrate(Monitor *mon, const QDict *qdict, QObject **ret_data);
 
@@ -79,14 +80,15 @@ MigrationState *exec_start_outgoing_migration(Monitor *mon,
 					      int blk,
 					      int inc);
 
-int tcp_start_incoming_migration(const char *host_port);
+int tcp_start_incoming_migration(const char *host_port, Error **errp);
 
 MigrationState *tcp_start_outgoing_migration(Monitor *mon,
                                              const char *host_port,
 					     int64_t bandwidth_limit,
 					     int detach,
 					     int blk,
-					     int inc);
+                                             int inc,
+                                             Error **errp);
 
 int unix_start_incoming_migration(const char *path);
 
diff --git a/vl.c b/vl.c
index ec5fd25..47acc53 100644
--- a/vl.c
+++ b/vl.c
@@ -6358,8 +6358,13 @@ int main(int argc, char **argv, char **envp)
 
     if (incoming) {
         runstate_set(RUN_STATE_INMIGRATE);
-        int ret = qemu_start_incoming_migration(incoming);
+        Error *errp = NULL;
+        int ret = qemu_start_incoming_migration(incoming, &errp);
         if (ret < 0) {
+            if (error_is_set(&errp)) {
+                fprintf(stderr, "Migrate: %s\n", error_get_pretty(errp));
+                error_free(errp);
+            }
             fprintf(stderr, "Migration failed. Exit code %s(%d), exiting.\n",
                     incoming, ret);
             exit(ret);
-- 
1.7.11.4

