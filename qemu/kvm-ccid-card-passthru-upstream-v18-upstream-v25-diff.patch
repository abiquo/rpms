From 9c135fa5bade5984a74000c455bee9f79b4ac5d8 Mon Sep 17 00:00:00 2001
From: Alon Levy <alevy@redhat.com>
Date: Mon, 4 Apr 2011 10:30:18 -0300
Subject: [RHEL6 qemu-kvm PATCH 08/12] ccid-card-passthru: upstream v18-upstream (v25) diff

RH-Author: Alon Levy <alevy@redhat.com>
Message-id: <1301913022-22142-9-git-send-email-alevy@redhat.com>
Patchwork-id: 21250
O-Subject: [PATCH RHEL6.1 v4 08/12] ccid-card-passthru: upstream v18-upstream
	(v25) diff
Bugzilla: 641833
RH-Acked-by: Amit Shah <amit.shah@redhat.com>
RH-Acked-by: Jes Sorensen <Jes.Sorensen@redhat.com>
RH-Acked-by: Hans de Goede <hdegoede@redhat.com>

BZ: 641833

straight copy of upstream version on top of rhel 6.1 version, only
change is qemu_chr_add_handlers (we pass a struct).
---
 hw/ccid-card-passthru.c |  191 ++++++++++++++++++++++++----------------------
 1 files changed, 100 insertions(+), 91 deletions(-)

Signed-off-by: Eduardo Habkost <ehabkost@redhat.com>
---
 hw/ccid-card-passthru.c |  191 ++++++++++++++++++++++++----------------------
 1 files changed, 100 insertions(+), 91 deletions(-)

diff --git a/hw/ccid-card-passthru.c b/hw/ccid-card-passthru.c
index 0748ba1..cad870e 100644
--- a/hw/ccid-card-passthru.c
+++ b/hw/ccid-card-passthru.c
@@ -4,12 +4,12 @@
  * Copyright (c) 2011 Red Hat.
  * Written by Alon Levy.
  *
- * This code is licenced under the GNU LGPL, version 2 or later.
+ * This work is licensed under the terms of the GNU GPL, version 2.1 or later.
+ * See the COPYING file in the top-level directory.
  */
 
-#include <arpa/inet.h>
-
 #include "qemu-char.h"
+#include "qemu_socket.h"
 #include "monitor.h"
 #include "hw/ccid.h"
 #include "libcacard/vscard_common.h"
@@ -28,13 +28,14 @@ do {                                                    \
 
 /* TODO: do we still need this? */
 uint8_t DEFAULT_ATR[] = {
-/* From some example somewhere
- 0x3B, 0xB0, 0x18, 0x00, 0xD1, 0x81, 0x05, 0xB1, 0x40, 0x38, 0x1F, 0x03, 0x28
+/*
+ * From some example somewhere
+ * 0x3B, 0xB0, 0x18, 0x00, 0xD1, 0x81, 0x05, 0xB1, 0x40, 0x38, 0x1F, 0x03, 0x28
  */
 
 /* From an Athena smart card */
- 0x3B, 0xD5, 0x18, 0xFF, 0x80, 0x91, 0xFE, 0x1F, 0xC3, 0x80, 0x73, 0xC8, 0x21, 0x13, 0x08
-
+ 0x3B, 0xD5, 0x18, 0xFF, 0x80, 0x91, 0xFE, 0x1F, 0xC3, 0x80, 0x73, 0xC8, 0x21,
+ 0x13, 0x08
 };
 
 
@@ -57,47 +58,50 @@ struct PassthruState {
     uint8_t  debug;
 };
 
-/* VSCard protocol over chardev
+/*
+ * VSCard protocol over chardev
  * This code should not depend on the card type.
- * */
+ */
 
-static void ccid_card_vscard_send_msg(
-    PassthruState *s, VSCMsgType type, uint32_t reader_id,
-        const uint8_t* payload, uint32_t length)
+static void ccid_card_vscard_send_msg(PassthruState *s,
+        VSCMsgType type, uint32_t reader_id,
+        const uint8_t *payload, uint32_t length)
 {
     VSCMsgHeader scr_msg_header;
 
     scr_msg_header.type = htonl(type);
     scr_msg_header.reader_id = htonl(reader_id);
     scr_msg_header.length = htonl(length);
-    qemu_chr_write(s->cs, (uint8_t*)&scr_msg_header, sizeof(VSCMsgHeader));
+    qemu_chr_write(s->cs, (uint8_t *)&scr_msg_header, sizeof(VSCMsgHeader));
     qemu_chr_write(s->cs, payload, length);
 }
 
-static void ccid_card_vscard_send_apdu(
-    PassthruState *s, const uint8_t* apdu, uint32_t length)
+static void ccid_card_vscard_send_apdu(PassthruState *s,
+    const uint8_t *apdu, uint32_t length)
 {
-    ccid_card_vscard_send_msg(s, VSC_APDU, VSCARD_MINIMAL_READER_ID, apdu, length);
+    ccid_card_vscard_send_msg(
+        s, VSC_APDU, VSCARD_MINIMAL_READER_ID, apdu, length);
 }
 
-static void ccid_card_vscard_send_error(
-    PassthruState *s, uint32_t reader_id, VSCErrorCode code)
+static void ccid_card_vscard_send_error(PassthruState *s,
+                    uint32_t reader_id, VSCErrorCode code)
 {
-    VSCMsgError msg = {.code=htonl(code)};
+    VSCMsgError msg = {.code = htonl(code)};
 
-    ccid_card_vscard_send_msg(s, VSC_Error, reader_id, (uint8_t*)&msg, sizeof(msg));
+    ccid_card_vscard_send_msg(
+        s, VSC_Error, reader_id, (uint8_t *)&msg, sizeof(msg));
 }
 
 static void ccid_card_vscard_send_init(PassthruState *s)
 {
     VSCMsgInit msg = {
-        .version=htonl(VSCARD_VERSION),
-        .magic=VSCARD_MAGIC,
-        .capabilities={0}
+        .version = htonl(VSCARD_VERSION),
+        .magic = VSCARD_MAGIC,
+        .capabilities = {0}
     };
 
     ccid_card_vscard_send_msg(s, VSC_Init, VSCARD_UNDEFINED_READER_ID,
-                         (uint8_t*)&msg, sizeof(msg));
+                         (uint8_t *)&msg, sizeof(msg));
 }
 
 static int ccid_card_vscard_can_read(void *opaque)
@@ -108,14 +112,16 @@ static int ccid_card_vscard_can_read(void *opaque)
            VSCARD_IN_SIZE - card->vscard_in_pos : 0;
 }
 
-static void ccid_card_vscard_handle_init(PassthruState *card, VSCMsgHeader *hdr, VSCMsgInit *init)
+static void ccid_card_vscard_handle_init(
+    PassthruState *card, VSCMsgHeader *hdr, VSCMsgInit *init)
 {
     uint32_t *capabilities;
     int num_capabilities;
     int i;
 
     capabilities = init->capabilities;
-    num_capabilities = 1 + ((hdr->length - sizeof(VSCMsgInit)) / sizeof(uint32_t));
+    num_capabilities =
+        1 + ((hdr->length - sizeof(VSCMsgInit)) / sizeof(uint32_t));
     init->version = ntohl(init->version);
     for (i = 0 ; i < num_capabilities; ++i) {
         capabilities[i] = ntohl(capabilities[i]);
@@ -125,66 +131,68 @@ static void ccid_card_vscard_handle_init(PassthruState *card, VSCMsgHeader *hdr,
         /* we can't disconnect the chardev */
     }
     if (init->version != VSCARD_VERSION) {
-        DPRINTF(card, D_WARN, "got version %d, have %d", init->version, VSCARD_VERSION);
+        DPRINTF(card, D_WARN,
+            "got version %d, have %d", init->version, VSCARD_VERSION);
     }
     /* future handling of capabilities, none exist atm */
     ccid_card_vscard_send_init(card);
 }
 
 static void ccid_card_vscard_handle_message(PassthruState *card,
-    VSCMsgHeader* scr_msg_header)
+    VSCMsgHeader *scr_msg_header)
 {
-    uint8_t *data = (uint8_t*)&scr_msg_header[1];
+    uint8_t *data = (uint8_t *)&scr_msg_header[1];
 
     switch (scr_msg_header->type) {
-        case VSC_ATR:
-            DPRINTF(card, D_INFO, "VSC_ATR %d\n", scr_msg_header->length);
-            if (scr_msg_header->length > MAX_ATR_SIZE) {
-                error_report("ATR size exceeds spec, ignoring");
-                ccid_card_vscard_send_error(card, scr_msg_header->reader_id,
-                                            VSC_GENERAL_ERROR);
-            }
-            memcpy(card->atr, data, scr_msg_header->length);
-            card->atr_length = scr_msg_header->length;
-            ccid_card_card_inserted(&card->base);
+    case VSC_ATR:
+        DPRINTF(card, D_INFO, "VSC_ATR %d\n", scr_msg_header->length);
+        if (scr_msg_header->length > MAX_ATR_SIZE) {
+            error_report("ATR size exceeds spec, ignoring");
             ccid_card_vscard_send_error(card, scr_msg_header->reader_id,
+                                        VSC_GENERAL_ERROR);
+        }
+        memcpy(card->atr, data, scr_msg_header->length);
+        card->atr_length = scr_msg_header->length;
+        ccid_card_card_inserted(&card->base);
+        ccid_card_vscard_send_error(card, scr_msg_header->reader_id,
+                                    VSC_SUCCESS);
+        break;
+    case VSC_APDU:
+        ccid_card_send_apdu_to_guest(
+            &card->base, data, scr_msg_header->length);
+        break;
+    case VSC_CardRemove:
+        DPRINTF(card, D_INFO, "VSC_CardRemove\n");
+        ccid_card_card_removed(&card->base);
+        ccid_card_vscard_send_error(card,
+            scr_msg_header->reader_id, VSC_SUCCESS);
+        break;
+    case VSC_Init:
+        ccid_card_vscard_handle_init(
+            card, scr_msg_header, (VSCMsgInit *)data);
+        break;
+    case VSC_Error:
+        ccid_card_card_error(&card->base, *(uint32_t *)data);
+        break;
+    case VSC_ReaderAdd:
+        if (ccid_card_ccid_attach(&card->base) < 0) {
+            ccid_card_vscard_send_error(card, VSCARD_UNDEFINED_READER_ID,
+                                      VSC_CANNOT_ADD_MORE_READERS);
+        } else {
+            ccid_card_vscard_send_error(card, VSCARD_MINIMAL_READER_ID,
                                         VSC_SUCCESS);
-            break;
-        case VSC_APDU:
-            ccid_card_send_apdu_to_guest(&card->base, data, scr_msg_header->length);
-            break;
-        case VSC_CardRemove:
-            DPRINTF(card, D_INFO, "VSC_CardRemove\n");
-            ccid_card_card_removed(&card->base);
-            ccid_card_vscard_send_error(card,
-                scr_msg_header->reader_id, VSC_SUCCESS);
-            break;
-        case VSC_Init:
-            ccid_card_vscard_handle_init(
-                card, scr_msg_header, (VSCMsgInit *)data);
-            break;
-        case VSC_Error:
-            ccid_card_card_error(&card->base, *(uint32_t*)data);
-            break;
-        case VSC_ReaderAdd:
-            if (ccid_card_ccid_attach(&card->base) < 0) {
-                ccid_card_vscard_send_error(card, VSCARD_UNDEFINED_READER_ID,
-                                          VSC_CANNOT_ADD_MORE_READERS);
-            } else {
-                ccid_card_vscard_send_error(card, VSCARD_MINIMAL_READER_ID,
-                                            VSC_SUCCESS);
-            }
-            break;
-        case VSC_ReaderRemove:
-            ccid_card_ccid_detach(&card->base);
-            ccid_card_vscard_send_error(card,
-                scr_msg_header->reader_id, VSC_SUCCESS);
-            break;
-        default:
-            printf("usb-ccid: chardev: unexpected message of type %X\n",
-                   scr_msg_header->type);
-            ccid_card_vscard_send_error(card, scr_msg_header->reader_id,
-                VSC_GENERAL_ERROR);
+        }
+        break;
+    case VSC_ReaderRemove:
+        ccid_card_ccid_detach(&card->base);
+        ccid_card_vscard_send_error(card,
+            scr_msg_header->reader_id, VSC_SUCCESS);
+        break;
+    default:
+        printf("usb-ccid: chardev: unexpected message of type %X\n",
+               scr_msg_header->type);
+        ccid_card_vscard_send_error(card, scr_msg_header->reader_id,
+            VSC_GENERAL_ERROR);
     }
 }
 
@@ -200,7 +208,8 @@ static void ccid_card_vscard_read(void *opaque, const uint8_t *buf, int size)
     VSCMsgHeader *hdr;
 
     if (card->vscard_in_pos + size > VSCARD_IN_SIZE) {
-        error_report("no room for data: pos %d +  size %d > %d. dropping connection.",
+        error_report(
+            "no room for data: pos %d +  size %d > %d. dropping connection.",
             card->vscard_in_pos, size, VSCARD_IN_SIZE);
         ccid_card_vscard_drop_connection(card);
         return;
@@ -209,17 +218,17 @@ static void ccid_card_vscard_read(void *opaque, const uint8_t *buf, int size)
     assert(card->vscard_in_hdr < VSCARD_IN_SIZE);
     memcpy(card->vscard_in_data + card->vscard_in_pos, buf, size);
     card->vscard_in_pos += size;
-    hdr = (VSCMsgHeader*)(card->vscard_in_data + card->vscard_in_hdr);
+    hdr = (VSCMsgHeader *)(card->vscard_in_data + card->vscard_in_hdr);
 
     while ((card->vscard_in_pos - card->vscard_in_hdr >= sizeof(VSCMsgHeader))
-        && (card->vscard_in_pos - card->vscard_in_hdr >=
+         &&(card->vscard_in_pos - card->vscard_in_hdr >=
                                   sizeof(VSCMsgHeader) + ntohl(hdr->length))) {
         hdr->reader_id = ntohl(hdr->reader_id);
         hdr->length = ntohl(hdr->length);
         hdr->type = ntohl(hdr->type);
         ccid_card_vscard_handle_message(card, hdr);
         card->vscard_in_hdr += hdr->length + sizeof(VSCMsgHeader);
-        hdr = (VSCMsgHeader*)(card->vscard_in_data + card->vscard_in_hdr);
+        hdr = (VSCMsgHeader *)(card->vscard_in_data + card->vscard_in_hdr);
     }
     if (card->vscard_in_hdr == card->vscard_in_pos) {
         card->vscard_in_pos = card->vscard_in_hdr = 0;
@@ -231,20 +240,21 @@ static void ccid_card_vscard_event(void *opaque, int event)
     PassthruState *card = opaque;
 
     switch (event) {
-        case CHR_EVENT_BREAK:
-            card->vscard_in_pos = card->vscard_in_hdr = 0;
-            break;
-        case CHR_EVENT_FOCUS:
-            break;
-        case CHR_EVENT_OPENED:
-            DPRINTF(card, D_INFO, "%s: CHR_EVENT_OPENED\n", __func__);
-            break;
+    case CHR_EVENT_BREAK:
+        card->vscard_in_pos = card->vscard_in_hdr = 0;
+        break;
+    case CHR_EVENT_FOCUS:
+        break;
+    case CHR_EVENT_OPENED:
+        DPRINTF(card, D_INFO, "%s: CHR_EVENT_OPENED\n", __func__);
+        break;
     }
 }
 
 /* End VSCard handling */
 
-static void passthru_apdu_from_guest(CCIDCardState *base, const uint8_t *apdu, uint32_t len)
+static void passthru_apdu_from_guest(
+    CCIDCardState *base, const uint8_t *apdu, uint32_t len)
 {
     PassthruState *card = DO_UPCAST(PassthruState, base, base);
 
@@ -255,7 +265,7 @@ static void passthru_apdu_from_guest(CCIDCardState *base, const uint8_t *apdu, u
     ccid_card_vscard_send_apdu(card, apdu, len);
 }
 
-static const uint8_t* passthru_get_atr(CCIDCardState *base, uint32_t *len)
+static const uint8_t *passthru_get_atr(CCIDCardState *base, uint32_t *len)
 {
     PassthruState *card = DO_UPCAST(PassthruState, base, base);
 
@@ -298,7 +308,7 @@ static VMStateDescription passthru_vmstate = {
     .name = PASSTHRU_DEV_NAME,
     .version_id = 1,
     .minimum_version_id = 1,
-    .fields = (VMStateField []) {
+    .fields = (VMStateField[]) {
         VMSTATE_BUFFER(vscard_in_data, PassthruState),
         VMSTATE_UINT32(vscard_in_pos, PassthruState),
         VMSTATE_UINT32(vscard_in_hdr, PassthruState),
@@ -317,7 +327,6 @@ static CCIDCardInfo passthru_card_info = {
     .exitfn = passthru_exitfn,
     .get_atr = passthru_get_atr,
     .apdu_from_guest = passthru_apdu_from_guest,
-    .qdev.unplug    = qdev_simple_unplug_cb,
     .qdev.props     = (Property[]) {
         DEFINE_PROP_CHR("chardev", PassthruState, cs),
         DEFINE_PROP_UINT8("debug", PassthruState, debug, 0),
-- 
1.7.3.2

