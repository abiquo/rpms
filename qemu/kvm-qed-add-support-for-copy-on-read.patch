From 0685e8ea85e203facdac1891c6233259864f32aa Mon Sep 17 00:00:00 2001
From: Anthony Liguori <aliguori@redhat.com>
Date: Fri, 12 Aug 2011 15:38:15 +0200
Subject: [PATCH 07/15] qed: add support for copy-on-read

RH-Author: Anthony Liguori <aliguori@redhat.com>
Message-id: <1313163503-2523-8-git-send-email-aliguori@redhat.com>
Patchwork-id: 31333
O-Subject: [RHEL6.2 qemu PATCH 07/15] qed: add support for copy-on-read
Bugzilla: 633370
RH-Acked-by: Marcelo Tosatti <mtosatti@redhat.com>
RH-Acked-by: Kevin Wolf <kwolf@redhat.com>
RH-Acked-by: Orit Wasserman <owasserm@redhat.com>
RH-Acked-by: Christoph Hellwig <chellwig@redhat.com>

From: Anthony Liguori <aliguori@us.ibm.com>

This patch implements copy-on-read in QED.  Once a read request reaches
the copy-on-read state it adds itself to the allocating write queue in
order to avoid race conditions with write requests.

If an allocating write request manages to sneak in before the
copy-on-read request, then the copy-on-read will notice that the cluster
has been allocated when qed_find_cluster() is re-run.  This works
because only one allocating request is active at any time and when the
next request is activated it will re-run qed_find_cluster().

[Originally by Anthony.  Stefan added allocating write queuing and
factored out the QED_CF_COPY_ON_READ header flag.]

Signed-off-by: Anthony Liguori <aliguori@us.ibm.com>
Signed-off-by: Stefan Hajnoczi <stefanha@linux.vnet.ibm.com>
Signed-off-by: Anthony Liguori <aliguori@redhat.com>

Bugzilla: 633370

---
 block/qed.c  |   35 +++++++++++++++++++++++++++++++++--
 block/qed.h  |    3 ++-
 trace-events |    1 +
 3 files changed, 36 insertions(+), 3 deletions(-)

Signed-off-by: Michal Novotny <mignov@gmail.com>
---
 block/qed.c  |   35 +++++++++++++++++++++++++++++++++--
 block/qed.h  |    3 ++-
 trace-events |    1 +
 3 files changed, 36 insertions(+), 3 deletions(-)

diff --git a/block/qed.c b/block/qed.c
index fcd34d4..b41b33b 100644
--- a/block/qed.c
+++ b/block/qed.c
@@ -1182,6 +1182,25 @@ static void qed_aio_write_data(void *opaque, int ret,
 }
 
 /**
+ * Copy on read callback
+ *
+ * Write data from backing file to QED that's been read if CoR is enabled.
+ */
+static void qed_copy_on_read_cb(void *opaque, int ret)
+{
+    QEDAIOCB *acb = opaque;
+
+    trace_qed_copy_on_read_cb(acb, ret);
+
+    if (ret < 0) {
+        qed_aio_complete(acb, ret);
+        return;
+    }
+
+    qed_aio_write_alloc(acb);
+}
+
+/**
  * Read data cluster
  *
  * @opaque:     Read request
@@ -1209,6 +1228,7 @@ static void qed_aio_read_data(void *opaque, int ret,
         goto err;
     }
 
+    acb->find_cluster_ret = ret;
     qemu_iovec_copy(&acb->cur_qiov, acb->qiov, acb->qiov_offset, len);
 
     /* Handle zero cluster and backing file reads */
@@ -1217,8 +1237,17 @@ static void qed_aio_read_data(void *opaque, int ret,
         qed_aio_next_io(acb, 0);
         return;
     } else if (ret != QED_CLUSTER_FOUND) {
+        BlockDriverCompletionFunc *cb = qed_aio_next_io;
+
+        if (bs->backing_hd && (acb->flags & QED_AIOCB_COPY_ON_READ)) {
+            if (!qed_start_allocating_write(acb)) {
+                qemu_iovec_reset(&acb->cur_qiov);
+                return; /* wait for current allocating write to complete */
+            }
+            cb = qed_copy_on_read_cb;
+        }
         qed_read_backing_file(s, acb->cur_pos, &acb->cur_qiov,
-                              qed_aio_next_io, acb);
+                              cb, acb);
         return;
     }
 
@@ -1302,7 +1331,9 @@ static BlockDriverAIOCB *bdrv_qed_aio_readv(BlockDriverState *bs,
                                             BlockDriverCompletionFunc *cb,
                                             void *opaque)
 {
-    return qed_aio_setup(bs, sector_num, qiov, nb_sectors, cb, opaque, 0);
+    int flags = bs->copy_on_read ? QED_AIOCB_COPY_ON_READ : 0;
+
+    return qed_aio_setup(bs, sector_num, qiov, nb_sectors, cb, opaque, flags);
 }
 
 static BlockDriverAIOCB *bdrv_qed_aio_writev(BlockDriverState *bs,
diff --git a/block/qed.h b/block/qed.h
index dbc00be..16f4bd9 100644
--- a/block/qed.h
+++ b/block/qed.h
@@ -124,7 +124,8 @@ typedef struct QEDRequest {
 } QEDRequest;
 
 enum {
-    QED_AIOCB_WRITE = 0x0001,       /* read or write? */
+    QED_AIOCB_WRITE = 0x0001,           /* read or write? */
+    QED_AIOCB_COPY_ON_READ = 0x0002,
 };
 
 typedef struct QEDAIOCB {
diff --git a/trace-events b/trace-events
index ebc12da..0895b83 100644
--- a/trace-events
+++ b/trace-events
@@ -144,6 +144,7 @@ disable qed_aio_complete(void *s, void *acb, int ret) "s %p acb %p ret %d"
 disable qed_aio_setup(void *s, void *acb, int64_t sector_num, int nb_sectors, void *opaque, int flags) "s %p acb %p sector_num %"PRId64" nb_sectors %d opaque %p flags %#x"
 disable qed_aio_next_io(void *s, void *acb, int ret, uint64_t cur_pos) "s %p acb %p ret %d cur_pos %"PRIu64""
 disable qed_aio_read_data(void *s, void *acb, int ret, uint64_t offset, size_t len) "s %p acb %p ret %d offset %"PRIu64" len %zu"
+disable qed_copy_on_read_cb(void *acb, int ret) "acb %p ret %d"
 disable qed_aio_write_data(void *s, void *acb, int ret, uint64_t offset, size_t len) "s %p acb %p ret %d offset %"PRIu64" len %zu"
 disable qed_aio_write_prefill(void *s, void *acb, uint64_t start, size_t len, uint64_t offset) "s %p acb %p start %"PRIu64" len %zu offset %"PRIu64""
 disable qed_aio_write_postfill(void *s, void *acb, uint64_t start, size_t len, uint64_t offset) "s %p acb %p start %"PRIu64" len %zu offset %"PRIu64""
-- 
1.7.4.4

