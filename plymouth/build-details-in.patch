From 32620a8c16dbb24163ac25a8ed75bfd22ea48775 Mon Sep 17 00:00:00 2001
From: Ray Strode <rstrode@redhat.com>
Date: Thu, 13 Oct 2011 00:29:56 -0400
Subject: [PATCH] details: build details in

This way if /usr isn't available details will still work.
---
 src/Makefile.am                          |    2 +
 src/libply-splash-core/ply-boot-splash.c |   45 ++++++++++++++++++++++++++++++
 src/libply-splash-core/ply-boot-splash.h |    2 +
 src/libply/ply-utils.c                   |   18 ++++++++++++
 src/libply/ply-utils.h                   |    2 +
 src/main.c                               |   45 ++++++++++++++++++++++++------
 6 files changed, 105 insertions(+), 9 deletions(-)

diff --git a/src/Makefile.am b/src/Makefile.am
index f0631dd..edf0d39 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -12,6 +12,7 @@ plymouthdbindir = $(plymouthdaemondir)
 plymouthdbin_PROGRAMS = plymouthd
 
 plymouthd_CFLAGS = $(PLYMOUTH_CFLAGS)                                         \
+		   -rdynamic                                                  \
 		   -DPLYMOUTH_PLUGIN_PATH=\"$(PLYMOUTH_PLUGIN_PATH)\"         \
 		   -DPLYMOUTH_THEME_PATH=\"$(PLYMOUTH_THEME_PATH)/\"          \
 		   -DPLYMOUTH_POLICY_DIR=\"$(PLYMOUTH_POLICY_DIR)/\"          \
@@ -21,6 +22,7 @@ plymouthd_SOURCES =                                                            \
                    ply-boot-protocol.h                                        \
                    ply-boot-server.h                                          \
                    ply-boot-server.c                                          \
+                   plugins/splash/details/plugin.c                  \
                    main.c
 
 plymouthdrundir = $(localstatedir)/run/plymouth
diff --git a/src/libply-splash-core/ply-boot-splash.c b/src/libply-splash-core/ply-boot-splash.c
index 0c77ef8..3ebee98 100644
--- a/src/libply-splash-core/ply-boot-splash.c
+++ b/src/libply-splash-core/ply-boot-splash.c
@@ -335,6 +335,51 @@ ply_boot_splash_load (ply_boot_splash_t *splash)
   return true;
 }
 
+bool
+ply_boot_splash_load_built_in (ply_boot_splash_t *splash)
+{
+  get_plugin_interface_function_t get_boot_splash_plugin_interface;
+
+  assert (splash != NULL);
+
+  splash->module_handle = ply_open_built_in_module ();
+
+  if (splash->module_handle == NULL)
+    return false;
+
+  get_boot_splash_plugin_interface = (get_plugin_interface_function_t)
+      ply_module_look_up_function (splash->module_handle,
+                                   "ply_boot_splash_plugin_get_interface");
+
+  if (get_boot_splash_plugin_interface == NULL)
+    {
+      ply_save_errno ();
+      ply_close_module (splash->module_handle);
+      splash->module_handle = NULL;
+      ply_restore_errno ();
+      return false;
+    }
+
+  splash->plugin_interface = get_boot_splash_plugin_interface ();
+
+  if (splash->plugin_interface == NULL)
+    {
+      ply_save_errno ();
+      ply_close_module (splash->module_handle);
+      splash->module_handle = NULL;
+      ply_restore_errno ();
+      return false;
+    }
+
+  splash->plugin = splash->plugin_interface->create_plugin (NULL);
+
+  assert (splash->plugin != NULL);
+
+  splash->is_loaded = true;
+
+  return true;
+}
+
 void
 ply_boot_splash_unload (ply_boot_splash_t *splash)
 {
diff --git a/src/libply-splash-core/ply-boot-splash.h b/src/libply-splash-core/ply-boot-splash.h
index d2c61a0..ee8cde4 100644
--- a/src/libply-splash-core/ply-boot-splash.h
+++ b/src/libply-splash-core/ply-boot-splash.h
@@ -45,7 +45,9 @@ ply_boot_splash_t *ply_boot_splash_new (const char   *  theme_path,
                                         const char   *  plugin_dir,
                                         ply_buffer_t *  boot_buffer,
                                         ply_terminal_t *terminal);
+
 bool ply_boot_splash_load (ply_boot_splash_t *splash);
+bool ply_boot_splash_load_built_in (ply_boot_splash_t *splash);
 void ply_boot_splash_unload (ply_boot_splash_t *splash);
 void ply_boot_splash_set_keyboard (ply_boot_splash_t *splash,
                                    ply_keyboard_t *keyboard);
diff --git a/src/libply/ply-utils.c b/src/libply/ply-utils.c
index 95e5918..0d7bdd6 100644
--- a/src/libply/ply-utils.c
+++ b/src/libply/ply-utils.c
@@ -701,6 +701,24 @@ ply_open_module (const char *module_path)
   return handle;
 }
 
+ply_module_handle_t *
+ply_open_built_in_module (void)
+{
+  ply_module_handle_t *handle;
+
+  handle = (ply_module_handle_t *) dlopen (NULL,
+                                           RTLD_NODELETE |RTLD_NOW | RTLD_LOCAL);
+
+  if (handle == NULL)
+    {
+      ply_trace("Could not load built-in module: %s\n",  dlerror ());
+      if (errno == 0)
+        errno = ELIBACC;
+    }
+
+  return handle;
+}
+
 ply_module_function_t
 ply_module_look_up_function (ply_module_handle_t *handle,
                              const char          *function_name)
diff --git a/src/libply/ply-utils.h b/src/libply/ply-utils.h
index 5d6e66d..2c4b3c7 100644
--- a/src/libply/ply-utils.h
+++ b/src/libply/ply-utils.h
@@ -90,6 +90,8 @@ bool ply_character_device_exists (const char *device);
 void ply_list_directory (const char *dir);
 
 ply_module_handle_t *ply_open_module (const char *module_path);
+ply_module_handle_t *ply_open_built_in_module (void);
+
 ply_module_function_t ply_module_look_up_function (ply_module_handle_t *handle,
                                                    const char  *function_name);
 void ply_close_module (ply_module_handle_t *handle);
diff --git a/src/main.c b/src/main.c
index 57c1cf1..ce9d525 100644
--- a/src/main.c
+++ b/src/main.c
@@ -121,7 +121,8 @@ typedef struct
 } state_t;
 
 static ply_boot_splash_t *start_boot_splash (state_t    *state,
-                                             const char *theme_path);
+                                             const char *theme_path,
+                                             bool        fall_back_if_neccessary);
 
 static void add_display_and_keyboard_for_terminal (state_t    *state,
                                                    const char *tty_name);
@@ -198,7 +199,8 @@ show_detailed_splash (state_t *state)
 
   ply_trace ("Showing detailed splash screen");
   state->boot_splash = start_boot_splash (state,
-                                          PLYMOUTH_THEME_PATH "details/details.plymouth");
+                                          PLYMOUTH_THEME_PATH "details/details.plymouth",
+                                          true);
 
   if (state->boot_splash == NULL)
     {
@@ -303,7 +305,8 @@ show_default_splash (state_t *state)
     {
       ply_trace ("Trying override splash at '%s'", state->override_splash_path);
       state->boot_splash = start_boot_splash (state,
-                                              state->override_splash_path);
+                                              state->override_splash_path,
+                                              false);
     }
 
   find_system_default_splash (state);
@@ -312,7 +315,8 @@ show_default_splash (state_t *state)
     {
       ply_trace ("Trying system default splash");
       state->boot_splash = start_boot_splash (state,
-                                              state->system_default_splash_path);
+                                              state->system_default_splash_path,
+                                              false);
     }
 
   find_distribution_default_splash (state);
@@ -321,14 +325,16 @@ show_default_splash (state_t *state)
     {
       ply_trace ("Trying distribution default splash");
       state->boot_splash = start_boot_splash (state,
-                                              state->distribution_default_splash_path);
+                                              state->distribution_default_splash_path,
+                                              false);
     }
 
   if (state->boot_splash == NULL)
     {
       ply_trace ("Trying old scheme for default splash");
       state->boot_splash = start_boot_splash (state,
-                                              PLYMOUTH_THEME_PATH "default.plymouth");
+                                              PLYMOUTH_THEME_PATH "default.plymouth",
+                                              false);
     }
 
   if (state->boot_splash == NULL)
@@ -336,7 +342,17 @@ show_default_splash (state_t *state)
       ply_trace ("Could not start default splash screen,"
                  "showing text splash screen");
       state->boot_splash = start_boot_splash (state,
-                                              PLYMOUTH_THEME_PATH "text/text.plymouth");
+                                              PLYMOUTH_THEME_PATH "text/text.plymouth",
+                                              false);
+    }
+
+  if (state->boot_splash == NULL)
+    {
+      ply_trace ("Could not start text splash screen,"
+                 "showing built-in fallback");
+      state->boot_splash = start_boot_splash (state,
+                                              PLYMOUTH_THEME_PATH "text/text.plymouth",
+                                              true);
     }
 
   if (state->boot_splash == NULL)
@@ -1406,10 +1422,12 @@ add_displays_and_keyboard_to_boot_splash (state_t           *state,
 
 static ply_boot_splash_t *
 start_boot_splash (state_t    *state,
-                   const char *theme_path)
+                   const char *theme_path,
+                   bool        fall_back_if_neccessary)
 {
   ply_boot_splash_t *splash;
   ply_boot_splash_mode_t splash_mode;
+  bool is_loaded;
 
   ply_trace ("Loading boot splash theme '%s'",
              theme_path);
@@ -1419,7 +1437,16 @@ start_boot_splash (state_t    *state,
                                 state->boot_buffer,
                                 state->terminal);
 
-  if (!ply_boot_splash_load (splash))
+  is_loaded = ply_boot_splash_load (splash);
+  if (!is_loaded && fall_back_if_neccessary)
+    {
+      ply_trace ("Splash couldn't be loaded: %m");
+
+      ply_trace ("Loading built in splash");
+      is_loaded = ply_boot_splash_load_built_in (splash);
+    }
+
+  if (!is_loaded)
     {
       ply_save_errno ();
       ply_boot_splash_free (splash);
-- 
1.7.1

