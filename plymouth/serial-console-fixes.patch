From 11a61a9b4a221dcbbae83e407cf2b4eb3c4ea7d7 Mon Sep 17 00:00:00 2001
From: Ray Strode <rstrode@redhat.com>
Date: Wed, 12 Oct 2011 15:50:56 -0400
Subject: [PATCH 1/6] main: fix kernel command line parsing

check_for_consoles has another bug (surprised?) where it would
jump too many characters forward if the command line has
console=tty0 in it, since tty0 is transparently changed to /dev/tty1.
---
 src/main.c |    5 ++++-
 1 files changed, 4 insertions(+), 1 deletions(-)

diff --git a/src/main.c b/src/main.c
index 33c8f44..d29b15c 100644
--- a/src/main.c
+++ b/src/main.c
@@ -1664,6 +1664,7 @@ check_for_consoles (state_t    *state,
   while ((console_key = strstr (remaining_command_line, " console=")) != NULL)
     {
       char *end;
+      size_t console_length;
 
       state->should_force_details = true;
 
@@ -1676,6 +1677,8 @@ check_for_consoles (state_t    *state,
       if (end != NULL)
         *end = '\0';
 
+      console_length = strlen (console);
+
       if (strcmp (console, "tty0") == 0 || strcmp (console, "/dev/tty0") == 0)
         {
           free (console);
@@ -1689,7 +1692,7 @@ check_for_consoles (state_t    *state,
 
       ply_hashtable_insert (consoles, console, NULL);
 
-      remaining_command_line += strlen (console);
+      remaining_command_line += console_length;
     }
 
   free (state->kernel_console_tty);
-- 
1.7.1


From 41f5b628adada11130c8ea44d1f0ee3ae934e62e Mon Sep 17 00:00:00 2001
From: Ray Strode <rstrode@redhat.com>
Date: Wed, 12 Oct 2011 23:32:36 -0400
Subject: [PATCH 2/6] boot-splash: deduce terminal from text display

Right now we pass a terminal to the constructor of the boot splash
object.  This terminal is used for going to KD_TEXT mode when
ctrl-T is tapped or when hiding the splash.

We only need to do this, though, when:

1) we're running on a local vt
2) we're showing graphics

the boot-splash code has all the knowledge it needs to figure these
two things out on its own, and furtermore it already can figure out
which terminal is the relevant one without being told at construct
time.

This commit adds those smarts to the boot splash code.
---
 src/libply-splash-core/ply-boot-splash.c |   63 ++++++++++++++++++++++++-----
 src/libply-splash-core/ply-boot-splash.h |    3 +-
 src/main.c                               |    3 +-
 3 files changed, 54 insertions(+), 15 deletions(-)

diff --git a/src/libply-splash-core/ply-boot-splash.c b/src/libply-splash-core/ply-boot-splash.c
index 3ebee98..fbd00e6 100644
--- a/src/libply-splash-core/ply-boot-splash.c
+++ b/src/libply-splash-core/ply-boot-splash.c
@@ -58,7 +58,6 @@ struct _ply_boot_splash
   ply_module_handle_t *module_handle;
   const ply_boot_splash_plugin_interface_t *plugin_interface;
   ply_boot_splash_plugin_t *plugin;
-  ply_terminal_t *terminal;
   ply_keyboard_t *keyboard;
   ply_buffer_t *boot_buffer;
   ply_trigger_t *idle_trigger;
@@ -87,8 +86,7 @@ static void ply_boot_splash_detach_from_event_loop (ply_boot_splash_t *splash);
 ply_boot_splash_t *
 ply_boot_splash_new (const char     *theme_path,
                      const char     *plugin_dir,
-                     ply_buffer_t   *boot_buffer,
-                     ply_terminal_t *terminal)
+                     ply_buffer_t   *boot_buffer)
 {
   ply_boot_splash_t *splash;
 
@@ -102,7 +100,6 @@ ply_boot_splash_new (const char     *theme_path,
   splash->is_shown = false;
 
   splash->boot_buffer = boot_buffer;
-  splash->terminal = terminal;
   splash->pixel_displays = ply_list_new ();
   splash->text_displays = ply_list_new ();
 
@@ -151,6 +148,32 @@ refresh_displays (ply_boot_splash_t *splash)
     }
 }
 
+static ply_terminal_t *
+find_local_console_terminal (ply_boot_splash_t *splash)
+{
+  ply_list_node_t *node;
+  node = ply_list_get_first_node (splash->text_displays);
+
+  while (node != NULL)
+    {
+      ply_text_display_t *display;
+      ply_terminal_t *terminal;
+      ply_list_node_t *next_node;
+
+      display = ply_list_node_get_data (node);
+      next_node = ply_list_get_next_node (splash->text_displays, node);
+
+      terminal = ply_text_display_get_terminal (display);
+
+      if (terminal != NULL && ply_terminal_is_vt (terminal))
+        return terminal;
+
+      node = next_node;
+    }
+
+  return NULL;
+}
+
 static void
 on_keyboard_input (ply_boot_splash_t *splash,
                    const char        *keyboard_input,
@@ -170,13 +193,23 @@ on_keyboard_input (ply_boot_splash_t *splash,
             ply_trace ("toggle text mode!");
             splash->should_force_text_mode = !splash->should_force_text_mode;
 
-            if (splash->should_force_text_mode)
+            if (ply_list_get_length (splash->pixel_displays) >= 1)
               {
-                ply_terminal_set_mode (splash->terminal, PLY_TERMINAL_MODE_TEXT);
-                ply_terminal_ignore_mode_changes (splash->terminal, true);
+                ply_terminal_t *terminal;
+
+                terminal = find_local_console_terminal (splash);
+
+                if (terminal != NULL)
+                  {
+                    if (splash->should_force_text_mode)
+                      {
+                        ply_terminal_set_mode (terminal, PLY_TERMINAL_MODE_TEXT);
+                        ply_terminal_ignore_mode_changes (terminal, true);
+                      }
+                    else
+                      ply_terminal_ignore_mode_changes (terminal, false);
+                  }
               }
-            else
-              ply_terminal_ignore_mode_changes (splash->terminal, false);
             ply_trace ("text mode toggled!");
           return;
 
@@ -616,7 +649,15 @@ ply_boot_splash_hide (ply_boot_splash_t *splash)
   splash->plugin_interface->hide_splash_screen (splash->plugin,
                                                 splash->loop);
 
-  ply_terminal_set_mode (splash->terminal, PLY_TERMINAL_MODE_TEXT);
+  if (ply_list_get_length (splash->pixel_displays) >= 1)
+    {
+      ply_terminal_t *terminal;
+
+      terminal = find_local_console_terminal (splash);
+
+      if (terminal != NULL)
+        ply_terminal_set_mode (terminal, PLY_TERMINAL_MODE_TEXT);
+    }
 
   splash->is_shown = false;
 
@@ -847,7 +888,7 @@ main (int    argc,
                                    (ply_keyboard_escape_handler_t) on_quit, &state);
 
   state.buffer = ply_buffer_new ();
-  state.splash = ply_boot_splash_new (theme_path, PLYMOUTH_PLUGIN_PATH, state.buffer, terminal);
+  state.splash = ply_boot_splash_new (theme_path, PLYMOUTH_PLUGIN_PATH, state.buffer);
 
   if (!ply_boot_splash_load (state.splash))
     {
diff --git a/src/libply-splash-core/ply-boot-splash.h b/src/libply-splash-core/ply-boot-splash.h
index ee8cde4..2b98139 100644
--- a/src/libply-splash-core/ply-boot-splash.h
+++ b/src/libply-splash-core/ply-boot-splash.h
@@ -43,8 +43,7 @@ typedef void (* ply_boot_splash_on_idle_handler_t) (void *user_data);
 #ifndef PLY_HIDE_FUNCTION_DECLARATIONS
 ply_boot_splash_t *ply_boot_splash_new (const char   *  theme_path,
                                         const char   *  plugin_dir,
-                                        ply_buffer_t *  boot_buffer,
-                                        ply_terminal_t *terminal);
+                                        ply_buffer_t *  boot_buffer);
 
 bool ply_boot_splash_load (ply_boot_splash_t *splash);
 bool ply_boot_splash_load_built_in (ply_boot_splash_t *splash);
diff --git a/src/main.c b/src/main.c
index d29b15c..bf0518f 100644
--- a/src/main.c
+++ b/src/main.c
@@ -1435,8 +1435,7 @@ start_boot_splash (state_t    *state,
 
   splash = ply_boot_splash_new (theme_path,
                                 PLYMOUTH_PLUGIN_PATH,
-                                state->boot_buffer,
-                                state->terminal);
+                                state->boot_buffer);
 
   is_loaded = ply_boot_splash_load (splash);
   if (!is_loaded && fall_back_if_neccessary)
-- 
1.7.1


From 650334e910f6dfd30e268cc172453f3dd7a95547 Mon Sep 17 00:00:00 2001
From: Ray Strode <rstrode@redhat.com>
Date: Wed, 12 Oct 2011 22:38:53 -0400
Subject: [PATCH 3/6] main: don't overwrite state->terminal if there are multiple consoles

We call the add_display_and_keyboard_for_terminal function for
every console passed into the kernel command line and once for
/dev/tty1 if no console line is passed in. This function
repeatedly, reinitializes state->terminal with whatever
terminal is passed in each time its called.

This commit changes add_display_and_keyboard_for_terminal to not
touch state->terminal and instead makes the callers do it
(if appropriate)
---
 src/main.c |   53 +++++++++++++++++++++++++++++++----------------------
 1 files changed, 31 insertions(+), 22 deletions(-)

diff --git a/src/main.c b/src/main.c
index bf0518f..742a54b 100644
--- a/src/main.c
+++ b/src/main.c
@@ -125,8 +125,8 @@ static ply_boot_splash_t *start_boot_splash (state_t    *state,
                                              const char *theme_path,
                                              bool        fall_back_if_neccessary);
 
-static void add_display_and_keyboard_for_terminal (state_t    *state,
-                                                   const char *tty_name);
+static void add_display_and_keyboard_for_terminal (state_t        *state,
+                                                   ply_terminal_t *terminal);
 
 static void add_default_displays_and_keyboard (state_t *state);
 
@@ -1296,18 +1296,14 @@ set_keyboard (state_t        *state,
                                   on_enter, state);
 }
 static void
-add_display_and_keyboard_for_terminal (state_t    *state,
-                                       const char *tty_name)
+add_display_and_keyboard_for_terminal (state_t        *state,
+                                       ply_terminal_t *terminal)
 {
   ply_text_display_t *display;
   ply_keyboard_t *keyboard;
 
-  ply_trace ("adding display and keyboard for %s", tty_name);
-
-  state->terminal = ply_terminal_new (tty_name);
-
-  keyboard = ply_keyboard_new_for_terminal (state->terminal);
-  display = ply_text_display_new (state->terminal);
+  keyboard = ply_keyboard_new_for_terminal (terminal);
+  display = ply_text_display_new (terminal);
 
   ply_list_append_data (state->text_displays, display);
   set_keyboard (state, keyboard);
@@ -1349,27 +1345,24 @@ add_default_displays_and_keyboard (state_t *state)
 {
   ply_renderer_t *renderer;
   ply_keyboard_t *keyboard;
-  ply_terminal_t *terminal;
   ply_text_display_t *text_display;
 
   ply_trace ("adding default displays and keyboard");
 
-  terminal = ply_terminal_new (state->default_tty);
+  state->terminal = ply_terminal_new (state->default_tty);
 
-  renderer = ply_renderer_new (NULL, terminal);
+  renderer = ply_renderer_new (NULL, state->terminal);
 
   if (!ply_renderer_open (renderer))
     {
       ply_trace ("could not open renderer /dev/fb");
       ply_renderer_free (renderer);
-      ply_terminal_free (terminal);
 
-      add_display_and_keyboard_for_terminal (state, state->default_tty);
+      ply_trace ("adding text display and keyboard for %s", state->default_tty);
+      add_display_and_keyboard_for_terminal (state, state->terminal);
       return;
     }
 
-  state->terminal = terminal;
-
   keyboard = ply_keyboard_new_for_renderer (renderer);
   set_keyboard (state, keyboard);
 
@@ -1640,7 +1633,15 @@ add_display_and_keyboard_for_console (const char *console,
                                       const char *null,
                                       state_t    *state)
 {
-  add_display_and_keyboard_for_terminal (state, console);
+  ply_terminal_t *terminal;
+
+  terminal = ply_terminal_new (console);
+
+  if (strcmp (console, state->default_tty) == 0)
+    state->terminal = terminal;
+
+  ply_trace ("adding display and keyboard for console %s", console);
+  add_display_and_keyboard_for_terminal (state, terminal);
 }
 
 static void
@@ -1664,6 +1665,7 @@ check_for_consoles (state_t    *state,
     {
       char *end;
       size_t console_length;
+      char *console_device;
 
       state->should_force_details = true;
 
@@ -1682,15 +1684,22 @@ check_for_consoles (state_t    *state,
         {
           free (console);
           console = strdup (default_tty);
-          ply_trace ("serial console tty0 found, assuming %s!", console);
+        }
+
+      if (strncmp (console, "/dev/", strlen ("/dev/")) == 0)
+        {
+          console_device = console;
+          console = NULL;
         }
       else
         {
-          ply_trace ("serial console %s found!", console);
+          asprintf (&console_device, "/dev/%s", console);
+          free (console);
+          console = NULL;
         }
 
-      ply_hashtable_insert (consoles, console, NULL);
-
+      ply_trace ("console %s found!", console_device);
+      ply_hashtable_insert (consoles, console_device, NULL);
       remaining_command_line += console_length;
     }
 
-- 
1.7.1


From 68ec6954ec53fd91dd1b3696beb8a6f6fd2bfa2f Mon Sep 17 00:00:00 2001
From: Ray Strode <rstrode@redhat.com>
Date: Thu, 13 Oct 2011 00:01:42 -0400
Subject: [PATCH 4/6] main: rename state->terminal to state->local_console_terminal

state->terminal is used for VT handling code.  To make it clear
what its role is, rename it to state->local_console_terminal.
---
 src/main.c |   42 +++++++++++++++++++++---------------------
 1 files changed, 21 insertions(+), 21 deletions(-)

diff --git a/src/main.c b/src/main.c
index 742a54b..9dbf33b 100644
--- a/src/main.c
+++ b/src/main.c
@@ -96,7 +96,7 @@ typedef struct
   ply_command_parser_t *command_parser;
   ply_mode_t mode;
   ply_renderer_t *renderer;
-  ply_terminal_t *terminal;
+  ply_terminal_t *local_console_terminal;
 
   ply_trigger_t *deactivate_trigger;
   ply_trigger_t *quit_trigger;
@@ -778,16 +778,16 @@ quit_splash (state_t *state)
       state->renderer = NULL;
     }
 
-  if (state->terminal != NULL)
+  if (state->local_console_terminal != NULL)
     {
       if (!state->should_retain_splash)
         {
           ply_trace ("Not retaining splash, so deallocating VT");
-          ply_terminal_deactivate_vt (state->terminal);
+          ply_terminal_deactivate_vt (state->local_console_terminal);
         }
-      ply_terminal_close (state->terminal);
-      ply_terminal_free (state->terminal);
-      state->terminal = NULL;
+      ply_terminal_close (state->local_console_terminal);
+      ply_terminal_free (state->local_console_terminal);
+      state->local_console_terminal = NULL;
     }
 
   if (state->session != NULL)
@@ -888,12 +888,12 @@ deactivate_splash (state_t *state)
       state->is_attached = false;
     }
 
-  if (state->terminal != NULL)
+  if (state->local_console_terminal != NULL)
     {
       ply_trace ("deactivating terminal");
-      ply_terminal_stop_watching_for_vt_changes (state->terminal);
-      ply_terminal_set_buffered_input (state->terminal);
-      ply_terminal_ignore_mode_changes (state->terminal, true);
+      ply_terminal_stop_watching_for_vt_changes (state->local_console_terminal);
+      ply_terminal_set_buffered_input (state->local_console_terminal);
+      ply_terminal_ignore_mode_changes (state->local_console_terminal, true);
     }
 
   state->is_inactive = true;
@@ -977,11 +977,11 @@ on_reactivate (state_t *state)
   if (!state->is_inactive)
     return;
 
-  if (state->terminal != NULL)
+  if (state->local_console_terminal != NULL)
     {
-      ply_terminal_watch_for_vt_changes (state->terminal);
-      ply_terminal_set_unbuffered_input (state->terminal);
-      ply_terminal_ignore_mode_changes (state->terminal, false);
+      ply_terminal_watch_for_vt_changes (state->local_console_terminal);
+      ply_terminal_set_unbuffered_input (state->local_console_terminal);
+      ply_terminal_ignore_mode_changes (state->local_console_terminal, false);
     }
 
   if ((state->session != NULL) && state->should_be_attached)
@@ -1060,8 +1060,8 @@ on_quit (state_t       *state,
 static bool
 on_has_active_vt (state_t *state)
 {
-  if (state->terminal != NULL)
-    return ply_terminal_is_active (state->terminal);
+  if (state->local_console_terminal != NULL)
+    return ply_terminal_is_active (state->local_console_terminal);
   else
     return false;
 }
@@ -1349,9 +1349,9 @@ add_default_displays_and_keyboard (state_t *state)
 
   ply_trace ("adding default displays and keyboard");
 
-  state->terminal = ply_terminal_new (state->default_tty);
+  state->local_console_terminal = ply_terminal_new (state->default_tty);
 
-  renderer = ply_renderer_new (NULL, state->terminal);
+  renderer = ply_renderer_new (NULL, state->local_console_terminal);
 
   if (!ply_renderer_open (renderer))
     {
@@ -1359,7 +1359,7 @@ add_default_displays_and_keyboard (state_t *state)
       ply_renderer_free (renderer);
 
       ply_trace ("adding text display and keyboard for %s", state->default_tty);
-      add_display_and_keyboard_for_terminal (state, state->terminal);
+      add_display_and_keyboard_for_terminal (state, state->local_console_terminal);
       return;
     }
 
@@ -1368,7 +1368,7 @@ add_default_displays_and_keyboard (state_t *state)
 
   add_pixel_displays_from_renderer (state, renderer);
 
-  text_display = ply_text_display_new (state->terminal);
+  text_display = ply_text_display_new (state->local_console_terminal);
   ply_list_append_data (state->text_displays, text_display);
 
   state->renderer = renderer;
@@ -1638,7 +1638,7 @@ add_display_and_keyboard_for_console (const char *console,
   terminal = ply_terminal_new (console);
 
   if (strcmp (console, state->default_tty) == 0)
-    state->terminal = terminal;
+    state->local_console_terminal = terminal;
 
   ply_trace ("adding display and keyboard for console %s", console);
   add_display_and_keyboard_for_terminal (state, terminal);
-- 
1.7.1


From fdd97d8ea65085443a0323b5dcff3227e260b08b Mon Sep 17 00:00:00 2001
From: Ray Strode <rstrode@redhat.com>
Date: Thu, 13 Oct 2011 00:26:54 -0400
Subject: [PATCH 5/6] main: close all terminals, not just local console terminal

It's important we close all terminals in the shutdown path,
so they all get unlocked and returned to cooked mode.

Previously, we would just close the local console terminal,
which meant other terminals would end up left in a broken state.
---
 src/main.c |   58 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++--
 1 files changed, 56 insertions(+), 2 deletions(-)

diff --git a/src/main.c b/src/main.c
index 9dbf33b..9479641 100644
--- a/src/main.c
+++ b/src/main.c
@@ -757,9 +757,62 @@ on_show_splash (state_t *state)
   show_messages (state);
 }
 
+static ply_list_t *
+get_tracked_terminals (state_t *state)
+{
+  ply_list_t *terminals;
+  ply_list_node_t *node;
+
+  terminals = ply_list_new ();
+
+  node = ply_list_get_first_node (state->text_displays);
+  while (node != NULL)
+    {
+      ply_list_node_t *next_node;
+      ply_text_display_t *display;
+      ply_terminal_t *terminal;
+
+      next_node = ply_list_get_next_node (state->text_displays, node);
+      display = ply_list_node_get_data (node);
+      terminal = ply_text_display_get_terminal (display);
+
+      ply_list_append_data (terminals, terminal);
+
+      node = next_node;
+    }
+
+  return terminals;
+}
+
+static void
+free_terminals (state_t    *state,
+                ply_list_t *terminals)
+{
+  ply_list_node_t *node;
+  node = ply_list_get_first_node (terminals);
+  while (node != NULL)
+    {
+      ply_list_node_t *next_node;
+      ply_terminal_t *terminal;
+
+      next_node = ply_list_get_next_node (state->text_displays, node);
+      terminal = ply_list_node_get_data (node);
+
+      ply_terminal_close (terminal);
+      ply_terminal_free (terminal);
+      ply_list_remove_node (terminals, node);
+
+      node = next_node;
+    }
+
+  ply_list_free (terminals);
+}
+
 static void
 quit_splash (state_t *state)
 {
+  ply_list_t *terminals;
+
   ply_trace ("quiting splash");
   if (state->boot_splash != NULL)
     {
@@ -768,6 +821,8 @@ quit_splash (state_t *state)
       state->boot_splash = NULL;
     }
 
+  terminals = get_tracked_terminals (state);
+
   ply_trace ("removing displays and keyboard");
   remove_displays_and_keyboard (state);
 
@@ -785,10 +840,9 @@ quit_splash (state_t *state)
           ply_trace ("Not retaining splash, so deallocating VT");
           ply_terminal_deactivate_vt (state->local_console_terminal);
         }
-      ply_terminal_close (state->local_console_terminal);
-      ply_terminal_free (state->local_console_terminal);
       state->local_console_terminal = NULL;
     }
+  free_terminals (state, terminals);
 
   if (state->session != NULL)
     {
-- 
1.7.1


From 03e6e428d56f45d206b7a5c8c98a6c5cd7ec4942 Mon Sep 17 00:00:00 2001
From: Ray Strode <rstrode@redhat.com>
Date: Thu, 27 Oct 2011 16:02:35 -0400
Subject: [PATCH 6/6] main: add a keyboard for each console

Since we show output on every console, we
should read input from every console.
---
 src/main.c |  100 +++++++++++++++++++++++++++++++++++++++++++-----------------
 1 files changed, 72 insertions(+), 28 deletions(-)

diff --git a/src/main.c b/src/main.c
index 9479641..3e672b5 100644
--- a/src/main.c
+++ b/src/main.c
@@ -84,7 +84,8 @@ typedef struct
   ply_boot_server_t *boot_server;
   ply_list_t *pixel_displays;
   ply_list_t *text_displays;
-  ply_keyboard_t *keyboard;
+  ply_list_t *keyboards;
+  ply_keyboard_t *legacy_keyboard; /* legacy for script plugin */
   ply_boot_splash_t *boot_splash;
   ply_terminal_session_t *session;
   ply_buffer_t *boot_buffer;
@@ -702,11 +703,22 @@ remove_displays_and_keyboard (state_t *state)
       node = next_node;
     }
 
-  if (state->keyboard != NULL)
+  state->legacy_keyboard = NULL;
+
+  node = ply_list_get_first_node (state->keyboards);
+  while (node != NULL)
     {
+      ply_list_node_t *next_node;
+      ply_keyboard_t *keyboard;
+
       ply_trace ("removing keyboard");
-      ply_keyboard_free (state->keyboard);
-      state->keyboard = NULL;
+      next_node = ply_list_get_next_node (state->keyboards, node);
+      keyboard = ply_list_node_get_data (node);
+      ply_keyboard_free (keyboard);
+
+      ply_list_remove_node (state->keyboards, node);
+
+      node = next_node;
     }
 }
 
@@ -987,6 +999,47 @@ on_boot_splash_idle (state_t *state)
     }
 }
 
+static void
+stop_watching_for_keyboard_input (state_t *state)
+{
+  ply_list_node_t *node;
+
+  node = ply_list_get_first_node (state->keyboards);
+  while (node != NULL)
+    {
+      ply_keyboard_t *keyboard;
+      ply_list_node_t *next_node;
+
+      keyboard = ply_list_node_get_data (node);
+      next_node = ply_list_get_next_node (state->keyboards, node);
+
+      ply_trace ("deactivating keyboard");
+      ply_keyboard_stop_watching_for_input (keyboard);
+
+      node = next_node;
+    }
+}
+
+static void
+watch_for_keyboard_input (state_t *state)
+{
+  ply_list_node_t *node;
+
+  node = ply_list_get_first_node (state->keyboards);
+  while (node != NULL)
+    {
+      ply_keyboard_t *keyboard;
+      ply_list_node_t *next_node;
+
+      keyboard = ply_list_node_get_data (node);
+      next_node = ply_list_get_next_node (state->keyboards, node);
+
+      ply_trace ("watching for input on keyboard ");
+      ply_keyboard_watch_for_input (keyboard);
+
+      node = next_node;
+    }
+}
 
 static void
 on_deactivate (state_t       *state,
@@ -1004,12 +1057,7 @@ on_deactivate (state_t       *state,
   state->deactivate_trigger = deactivate_trigger;
 
   ply_trace ("deactivating");
-
-  if (state->keyboard != NULL)
-    {
-      ply_trace ("deactivating keyboard");
-      ply_keyboard_stop_watching_for_input (state->keyboard);
-    }
+  stop_watching_for_keyboard_input (state);
 
   if (state->boot_splash != NULL)
     {
@@ -1044,11 +1092,7 @@ on_reactivate (state_t *state)
       attach_to_running_session (state);
     }
 
-  if (state->keyboard != NULL)
-    {
-      ply_trace ("activating keyboard");
-      ply_keyboard_watch_for_input (state->keyboard);
-    }
+  watch_for_keyboard_input (state);
 
   if (state->renderer != NULL)
     {
@@ -1086,11 +1130,7 @@ on_quit (state_t       *state,
   if (state->session != NULL)
     ply_terminal_session_close_log (state->session);
 
-  if (state->keyboard != NULL)
-    {
-      ply_trace ("deactivating keyboard");
-      ply_keyboard_stop_watching_for_input (state->keyboard);
-    }
+  stop_watching_for_keyboard_input (state);
 
   ply_trace ("unloading splash");
   if (state->is_inactive && !retain_splash)
@@ -1329,10 +1369,13 @@ on_enter (state_t                  *state,
 }
 
 static void
-set_keyboard (state_t        *state,
+add_keyboard (state_t        *state,
               ply_keyboard_t *keyboard)
 {
-  state->keyboard = keyboard;
+  ply_list_append_data (state->keyboards, keyboard);
+
+  if (state->legacy_keyboard == NULL)
+    state->legacy_keyboard = keyboard;
 
   ply_keyboard_add_escape_handler (keyboard, (ply_keyboard_escape_handler_t)
                                    on_escape_pressed, state);
@@ -1360,7 +1403,7 @@ add_display_and_keyboard_for_terminal (state_t        *state,
   display = ply_text_display_new (terminal);
 
   ply_list_append_data (state->text_displays, display);
-  set_keyboard (state, keyboard);
+  add_keyboard (state, keyboard);
 }
 
 static void
@@ -1418,7 +1461,7 @@ add_default_displays_and_keyboard (state_t *state)
     }
 
   keyboard = ply_keyboard_new_for_renderer (renderer);
-  set_keyboard (state, keyboard);
+  add_keyboard (state, keyboard);
 
   add_pixel_displays_from_renderer (state, renderer);
 
@@ -1435,8 +1478,8 @@ add_displays_and_keyboard_to_boot_splash (state_t           *state,
   ply_list_node_t *node;
 
   ply_trace ("setting keyboard on boot splash");
-  if (state->keyboard != NULL)
-    ply_boot_splash_set_keyboard (splash, state->keyboard);
+  if (state->legacy_keyboard != NULL)
+    ply_boot_splash_set_keyboard (splash, state->legacy_keyboard);
 
   node = ply_list_get_first_node (state->pixel_displays);
   while (node != NULL)
@@ -1524,7 +1567,7 @@ start_boot_splash (state_t    *state,
       return NULL;
     }
 
-  ply_keyboard_watch_for_input (state->keyboard);
+  watch_for_keyboard_input (state);
 
   update_display (state);
   return splash;
@@ -1848,7 +1891,8 @@ initialize_environment (state_t *state)
   state->pixel_displays = ply_list_new ();
   state->text_displays = ply_list_new ();
   state->messages = ply_list_new ();
-  state->keyboard = NULL;
+  state->keyboards = ply_list_new ();
+  state->legacy_keyboard = NULL;
 
   if (!state->default_tty)
     {
-- 
1.7.1

