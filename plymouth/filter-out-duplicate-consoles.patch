From c7a9409a07a26461cabe22b7b1db1b108651a6c2 Mon Sep 17 00:00:00 2001
From: Ray Strode <rstrode@redhat.com>
Date: Thu, 13 Oct 2011 00:32:53 -0400
Subject: [PATCH] main: filter out duplicate consoles

---
 src/main.c |   66 ++++++++++++++++++++++++++++++++++++++++++++---------------
 1 files changed, 49 insertions(+), 17 deletions(-)

diff --git a/src/main.c b/src/main.c
index ce9d525..33c8f44 100644
--- a/src/main.c
+++ b/src/main.c
@@ -43,6 +43,7 @@
 #include "ply-boot-server.h"
 #include "ply-boot-splash.h"
 #include "ply-event-loop.h"
+#include "ply-hashtable.h"
 #include "ply-list.h"
 #include "ply-logger.h"
 #include "ply-terminal-session.h"
@@ -1636,51 +1637,82 @@ check_logging (state_t *state)
 }
 
 static void
+add_display_and_keyboard_for_console (const char *console,
+                                      const char *null,
+                                      state_t    *state)
+{
+  add_display_and_keyboard_for_terminal (state, console);
+}
+
+static void
 check_for_consoles (state_t    *state,
                     const char *default_tty,
                     bool        should_add_displays)
 {
   char *console_key;
   char *remaining_command_line;
+  char *console;
+  ply_hashtable_t *consoles;
 
   ply_trace ("checking for consoles%s",
              should_add_displays? " and adding displays": "");
 
+  consoles = ply_hashtable_new (ply_hashtable_string_hash,
+                                ply_hashtable_string_compare);
   remaining_command_line = state->kernel_command_line;
+  console = NULL;
   while ((console_key = strstr (remaining_command_line, " console=")) != NULL)
     {
       char *end;
-      ply_trace ("serial console found!");
 
       state->should_force_details = true;
 
-      free (state->kernel_console_tty);
-      state->kernel_console_tty = strdup (console_key + strlen (" console="));
-
       remaining_command_line = console_key + strlen (" console=");
 
-      end = strpbrk (state->kernel_console_tty, " \n\t\v,");
+      console = strdup (remaining_command_line);
+
+      end = strpbrk (console, " \n\t\v,");
 
       if (end != NULL)
+        *end = '\0';
+
+      if (strcmp (console, "tty0") == 0 || strcmp (console, "/dev/tty0") == 0)
         {
-          *end = '\0';
-          remaining_command_line += end - state->kernel_console_tty;
+          free (console);
+          console = strdup (default_tty);
+          ply_trace ("serial console tty0 found, assuming %s!", console);
         }
-
-      if (strcmp (state->kernel_console_tty, "tty0") == 0 || strcmp (state->kernel_console_tty, "/dev/tty0") == 0)
+      else
         {
-          free (state->kernel_console_tty);
-          state->kernel_console_tty = strdup (default_tty);
+          ply_trace ("serial console %s found!", console);
         }
 
-      if (should_add_displays)
-        add_display_and_keyboard_for_terminal (state, state->kernel_console_tty);
+      ply_hashtable_insert (consoles, console, NULL);
+
+      remaining_command_line += strlen (console);
+    }
+
+  free (state->kernel_console_tty);
+  state->kernel_console_tty = NULL;
+
+  if (console != NULL)
+    state->kernel_console_tty = strdup (console);
+
+  if (should_add_displays)
+    {
+      ply_hashtable_foreach (consoles,
+                             (ply_hashtable_foreach_func_t *)
+                             add_display_and_keyboard_for_console,
+                             state);
     }
 
-    ply_trace ("There are currently %d text displays",
-               ply_list_get_length (state->text_displays));
-    if (should_add_displays && ply_list_get_length (state->text_displays) == 0)
-      add_default_displays_and_keyboard (state);
+  ply_hashtable_foreach (consoles, (ply_hashtable_foreach_func_t *) free, NULL);
+  ply_hashtable_free (consoles);
+
+  ply_trace ("After processing serial consoles there are now %d text displays",
+             ply_list_get_length (state->text_displays));
+  if (should_add_displays && ply_list_get_length (state->text_displays) == 0)
+    add_default_displays_and_keyboard (state);
 }
 
 static bool
-- 
1.7.1

